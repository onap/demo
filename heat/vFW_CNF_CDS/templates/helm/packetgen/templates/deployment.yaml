apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "packetgen.fullname" . }}
  labels:
    release: {{ .Release.Name }}
    app: {{ include "packetgen.name" . }}
    chart: {{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: {{ include "packetgen.name" .}}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ include "packetgen.name" .}}
        release: {{ .Release.Name }}
      annotations:
        app: {{ include "packetgen.name" . }}
        release: {{ .Release.Name }}
        VirtletLibvirtCPUSetting: |
          mode: host-model
        VirtletCloudInitUserData: |
          ssh_pwauth: True
          users:
          - name: admin
            gecos: User
            primary-group: admin
            groups: users
            sudo: ALL=(ALL) NOPASSWD:ALL
            lock_passwd: false
            passwd: "$6$rounds=4096$QA5OCKHTE41$jRACivoPMJcOjLRgxl3t.AMfU7LhCFwOWv2z66CQX.TSxBy50JoYtycJXSPr2JceG.8Tq/82QN9QYt3euYEZW/"
          runcmd:
            - env #FIXME #Tests
            - cat /etc/cloud/environment #FIXME #Tests
            - wget -O - https://git.onap.org/multicloud/k8s/plain/kud/tests/vFW/packetgen | sudo -E bash
        VirtletRootVolumeSize: 5Gi
        k8s.v1.cni.cncf.io/networks: "{{ .Values.vnf_name }}-ovn-attachment"
        k8s.plugin.opnfv.org/nfn-network: |
            { "type": "ovn4nfv",
              "interface": [
                { "name": {{ .Values.global.unprotectedNetworkName | quote }},
                  "ipAddress": {{ .Values.global.vpgPrivateIp0 | quote  }},
                  "interface": "eth1" ,
                  "defaultGateway": "false"},
                { "name": {{ .Values.global.onapPrivateNetworkName | quote }},
                  "ipAddress": {{ .Values.global.vpgPrivateIp1 | quote }},
                  "interface": "eth2",
                  "defaultGateway": "false" }
              ]
            }
        kubernetes.io/target-runtime: virtlet.cloud
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: extraRuntime
                operator: In
                values:
                - virtlet
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        tty: true
        stdin: true
        envFrom:
        - configMapRef:
            name: {{ include "packetgen.name" . }}-configmap
        resources:
          limits:
            memory: {{ .Values.resources.limits.memory }}
