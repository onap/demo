##########################################################################
#
#==================LICENSE_START==========================================
#
#
# Copyright 2017 AT&T Intellectual Property. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#==================LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
#
##########################################################################

heat_template_version: 2013-05-23

description: Heat template to deploy vCPE Infrastructue Metro vGMUX for ONAP

##############
#            #
# PARAMETERS #
#            #
##############

parameters:
  vcpe_image_name:
    type: string
    label: Image name or ID
    description: Image to be used for compute instance
  vcpe_flavor_name:
    type: string
    label: Flavor
    description: Type of instance (flavor) to be used
  public_net_id:
    type: string
    label: Public network name or ID
    description: Public network that enables remote connection to VNF
  bng_gmux_private_net_id:
    type: string
    label: vBNG vGMUX private network name or ID
    description: Private network that connects vBNG to vGMUX
  bng_gmux_private_net_cidr:
    type: string
    label: vBNG vGMUX private network CIDR
    description: The CIDR of the vBNG-vGMUX private network
  mux_gw_private_net_id:
    type: string
    label: vCPE Public network name or ID
    description: Private network that connects vGMUX to vGWs
  mux_gw_private_net_cidr:
    type: string
    label: vGMUX private network CIDR
    description: The CIDR of the vGMUX private network
  onap_private_net_id:
    type: string
    label: ONAP management network name or ID
    description: Private network that connects ONAP components and the VNF
  onap_private_subnet_id:
    type: string
    label: ONAP management sub-network name or ID
    description: Private sub-network that connects ONAP components and the VNF
  onap_private_net_cidr:
    type: string
    label: ONAP private network CIDR
    description: The CIDR of the protected private network
  vgmux_private_ip_0:
    type: string
    label: vGMUX private IP address towards the vBNG-vGMUX private network
    description: Private IP address that is assigned to the vGMUX to communicate with the vBNG
  vgmux_private_ip_1:
    type: string
    label: vGMUX private IP address towards the ONAP management network
    description: Private IP address that is assigned to the vGMUX to communicate with ONAP components
  vgmux_private_ip_2:
    type: string
    label: vGMUX private IP address towards the vGMUX-vGW private network
    description: Private IP address that is assigned to the vGMUX to communicate with vGWs
  vgmux_name_0:
    type: string
    label: vGMUX name
    description: Name of the vGMUX
  vnf_id:
    type: string
    label: VNF ID
    description: The VNF ID is provided by ONAP
  vf_module_id:
    type: string
    label: vCPE module ID
    description: The vCPE Module ID is provided by ONAP
  dcae_collector_ip:
    type: string
    label: DCAE collector IP address
    description: IP address of the DCAE collector
  dcae_collector_port:
    type: string
    label: DCAE collector port
    description: Port of the DCAE collector
  key_name:
    type: string
    label: Key pair name
    description: Public/Private key pair name
  pub_key:
    type: string
    label: Public key
    description: Public key to be installed on the compute instance
  repo_url_blob:
    type: string
    label: Repository URL
    description: URL of the repository that hosts the demo packages
  repo_url_artifacts:
    type: string
    label: Repository URL
    description: URL of the repository that hosts the demo packages
  install_script_version:
    type: string
    label: Installation script version number
    description: Version number of the scripts that install the vFW demo app
  demo_artifacts_version:
    type: string
    label: Artifacts version used in demo vnfs
    description: Artifacts (jar, tar.gz) version used in demo vnfs
  cloud_env:
    type: string
    label: Cloud environment
    description: Cloud environment (e.g., openstack, rackspace)
  vpp_source_repo_url:
    type: string
    label: VPP Source Git Repo
    description: URL for VPP source codes
  vpp_source_repo_branch:
    type: string
    label: VPP Source Git Branch
    description: Git Branch for the VPP source codes
  hc2vpp_source_repo_url:
    type: string
    label: Honeycomb Source Git Repo
    description: URL for Honeycomb source codes
  hc2vpp_source_repo_branch:
    type: string
    label: Honeycomb Source Git Branch
    description: Git Branch for the Honeycomb source codes
  vpp_patch_url:
    type: string
    label: VPP Patch URL
    description: URL for VPP patch for vG-MUX
  hc2vpp_patch_url:
    type: string
    label: Honeycomb Patch URL
    description: URL for Honeycomb patch for vG-MUX

#############
#           #
# RESOURCES #
#           #
#############

resources:

  random-str:
    type: OS::Heat::RandomString
    properties:
      length: 4

  my_keypair:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: base_rand
          params:
            base: { get_param: key_name }
            rand: { get_resource: random-str }
      public_key: { get_param: pub_key }
      save_private_key: false

  mux_gw_private_network:
    type: OS::Neutron::Net
    properties:
      name: { get_param: mux_gw_private_net_id }

  mux_gw_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: mux_gw_private_net_id }
      network_id: { get_resource: mux_gw_private_network }
      cidr: { get_param: mux_gw_private_net_cidr }
      
  bng_gmux_private_network:
    type: OS::Neutron::Net
    properties:
      name: { get_param: bng_gmux_private_net_id }

  bng_gmux_private_subnet:
    type: OS::Neutron::Subnet
    properties:
      name: { get_param: bng_gmux_private_net_id }
      network_id: { get_resource: bng_gmux_private_network }
      cidr: { get_param: bng_gmux_private_net_cidr }

  # Virtual GMUX Instantiation
  vgmux_private_0_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: bng_gmux_private_network }
      fixed_ips: [{"subnet": { get_resource: bng_gmux_private_subnet }, "ip_address": { get_param: vgmux_private_ip_0 }}]

  vgmux_private_1_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: onap_private_net_id }
      fixed_ips: [{"subnet": { get_param: onap_private_subnet_id }, "ip_address": { get_param: vgmux_private_ip_1 }}]

  vgmux_private_2_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: mux_gw_private_network }
      fixed_ips: [{"subnet": {  get_resource: mux_gw_private_subnet }, "ip_address": { get_param: vgmux_private_ip_2 }}]

  vgmux_0:
    type: OS::Nova::Server
    properties:
      image: { get_param: vcpe_image_name }
      flavor: { get_param: vcpe_flavor_name }
      name: { get_param: vgmux_name_0 }
      key_name: { get_resource: my_keypair }
      networks:
        - network: { get_param: public_net_id }
        - port: { get_resource: vgmux_private_0_port }
        - port: { get_resource: vgmux_private_1_port }
        - port: { get_resource: vgmux_private_2_port }
      metadata: {vnf_id: { get_param: vnf_id }, vf_module_id: { get_param: vf_module_id }}
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __bng_mux_net_ipaddr__ : { get_param: vgmux_private_ip_0 }
            __oam_ipaddr__ : { get_param: vgmux_private_ip_1 }
            __mux_gw_net_ipaddr__ : { get_param: vgmux_private_ip_2 }
            __bng_mux_net_cidr__ : { get_param: bng_gmux_private_net_cidr }
            __oam_cidr__ : { get_param: onap_private_net_cidr }
            __mux_gw_net_cidr__ : { get_param: mux_gw_private_net_cidr }
            __repo_url_blob__ : { get_param: repo_url_blob }
            __repo_url_artifacts__ : { get_param: repo_url_artifacts }
            __demo_artifacts_version__ : { get_param: demo_artifacts_version }
            __install_script_version__ : { get_param: install_script_version }
            __cloud_env__ : { get_param: cloud_env }
            __vpp_source_repo_url__ : { get_param: vpp_source_repo_url }
            __vpp_source_repo_branch__ : { get_param: vpp_source_repo_branch }
            __hc2vpp_source_repo_url__ : { get_param: hc2vpp_source_repo_url }
            __hc2vpp_source_repo_branch__ : { get_param: hc2vpp_source_repo_branch }
            __vpp_patch_url__ : { get_param: vpp_patch_url }
            __hc2vpp_patch_url__ : { get_param: hc2vpp_patch_url }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir /opt/config
            echo "__bng_mux_net_ipaddr__" > /opt/config/bng_mux_net_ipaddr.txt
            echo "__oam_ipaddr__" > /opt/config/oam_ipaddr.txt
            echo "__mux_gw_net_ipaddr__" > /opt/config/mux_gw_net_ipaddr.txt
            echo "__bng_mux_net_cidr__" > /opt/config/bng_mux_net_cidr.txt
            echo "__oam_cidr__" > /opt/config/oam_cidr.txt
            echo "__mux_gw_net_cidr__" > /opt/config/mux_gw_net_cidr.txt
            echo "__repo_url_blob__" > /opt/config/repo_url_blob.txt
            echo "__repo_url_artifacts__" > /opt/config/repo_url_artifacts.txt
            echo "__demo_artifacts_version__" > /opt/config/demo_artifacts_version.txt
            echo "__install_script_version__" > /opt/config/install_script_version.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__vpp_source_repo_url__" > /opt/config/vpp_source_repo_url.txt
            echo "__vpp_source_repo_branch__" > /opt/config/vpp_source_repo_branch.txt
            echo "__vpp_patch_url__" > /opt/config/vpp_patch_url.txt
            echo "__hc2vpp_source_repo_url__" > /opt/config/hc2vpp_source_repo_url.txt
            echo "__hc2vpp_source_repo_branch__" > /opt/config/hc2vpp_source_repo_branch.txt
            echo "__hc2vpp_patch_url__" > /opt/config/hc2vpp_patch_url.txt

            # Download and run install script
            curl -k __repo_url_blob__/org.onap.demo/vnfs/vcpe/__install_script_version__/v_gmux_install.sh -o /opt/v_gmux_install.sh
            cd /opt
            chmod +x v_gmux_install.sh
            ./v_gmux_install.sh

