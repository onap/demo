##########################################################################
#
#==================LICENSE_START==========================================
# 
#
# Copyright Â© 2017 AT&T Intellectual Property. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#        http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#==================LICENSE_END============================================
#
# ECOMP is a trademark and service mark of AT&T Intellectual Property.
#
##########################################################################

heat_template_version: 2015-10-15

description: Heat template to install ONAP components

##############
#            #
# PARAMETERS #
#            #
##############

parameters:

  ##############################################
  #                                            #
  # Parameters used across all ONAP components #
  #                                            #
  ##############################################

  public_net_id:
    type: string
    description: Public network for floating IP address allocation
    
  public_subnet_id:
    type: string
    description: Public subnet for floating IP address allocation
    
  router_gateway_ip:
    type: string
    description: Router gateway IP address

  ubuntu_1404_image:
    type: string
    description: Name of the Ubuntu 14.04 image

  ubuntu_1604_image:
    type: string
    description: Name of the Ubuntu 16.04 image

  flavor_small:
    type: string
    description: Name of the Small Flavor supported by the cloud provider

  flavor_medium:
    type: string
    description: Name of the Medium Flavor supported by the cloud provider

  flavor_large:
    type: string
    description: Name of the Large Flavor supported by the cloud provider

  flavor_xlarge:
    type: string
    description: Name of the Extra Large Flavor supported by the cloud provider

  flavor_xxlarge:
    type: string
    description: Name of the Extra Extra Large Flavor supported by the cloud provider

  vm_base_name:
    type: string
    description: Base name of ONAP VMs

  key_name:
    type: string
    description: Public/Private key pair name

  pub_key:
    type: string
    description: Public key to be installed on the compute instance

  nexus_repo:
    type: string
    description: Complete URL for the Nexus repository.

  nexus_docker_repo:
    type: string
    description: Complete URL for the Nexus repository for docker images.

  nexus_username:
    type: string
    description: Nexus Repository username

  nexus_password:
    type: string
    description: Nexus Repository Password

  artifacts_version:
    type: string
    description: Artifacts version of ONAP components

  dmaap_topic:
    type: string
    description: DMaaP Topic name

  openstack_tenant_id:
    type: string
    description: Openstack tenant ID

  openstack_username:
    type: string
    description: Openstack username

  openstack_auth_method:
    type: string
    description: Openstack authentication method (password VS. api-key)

  openstack_api_key:
    type: string
    description: Openstack password or API Key

  horizon_url:
    type: string
    description: URL of Openstack Horizon

  keystone_url:
    type: string
    description: URL of Openstack Keystone

  cloud_env:
    type: string
    description: Cloud Provider Name


  ######################
  #                    #
  # Network parameters #
  #                    #
  ######################

  dns_list:
    type: comma_delimited_list
    description: List of External DNS for OAM ONAP network

  external_dns:
    type: string
    description: First element of the dns_list for ONAP network

  oam_network_cidr:
    type: string
    description: CIDR of the OAM ONAP network

  ### Floating IP addresses ###
  aai1_float_ip:
    type: string
  aai2_float_ip:
    type: string
  appc_float_ip:
    type: string
  dcae_float_ip:
    type: string
  dcae_coll_float_ip:
    type: string
  dcae_db_float_ip:
    type: string
  dcae_hdp1_float_ip:
    type: string
  dcae_hdp2_float_ip:
    type: string
  dcae_hdp3_float_ip:
    type: string
  dns_float_ip:
    type: string
  so_float_ip:
    type: string
  mr_float_ip:
    type: string
  policy_float_ip:
    type: string
  portal_float_ip:
    type: string
  robot_float_ip:
    type: string
  sdc_float_ip:
    type: string
  sdnc_float_ip:
    type: string
  vid_float_ip:
    type: string
  clamp_float_ip:
    type: string
  openo_float_ip:
    type: string
 
  ### Private IP addresses ###

  aai1_ip_addr:
    type: string
  aai2_ip_addr:
    type: string
  appc_ip_addr:
    type: string
  dcae_ip_addr:
    type: string
  dcae_coll_ip_addr:
    type: string
  dcae_db_ip_addr:
    type: string
  dcae_hdp1_ip_addr:
    type: string
  dcae_hdp2_ip_addr:
    type: string
  dcae_hdp3_ip_addr:
    type: string
  dns_ip_addr:
    type: string
  so_ip_addr:
    type: string
  mr_ip_addr:
    type: string
  policy_ip_addr:
    type: string
  portal_ip_addr:
    type: string
  robot_ip_addr:
    type: string
  sdc_ip_addr:
    type: string
  sdnc_ip_addr:
    type: string
  vid_ip_addr:
    type: string
  clamp_ip_addr:
    type: string
  openo_ip_addr:
    type: string


  ###########################
  #                         #
  # Parameters used by DCAE #
  #                         #
  ###########################

  dcae_base_environment:
    type: string
    description: DCAE Base Environment configuration (RACKSPACE/2-NIC/1-NIC-FLOATING-IPS)

  dcae_zone:
    type: string
    description: DCAE Zone to use in VM names created by DCAE controller

  dcae_state:
    type: string
    description: DCAE State to use in VM names created by DCAE controller

  nexus_repo_root:
    type: string
    description: Root URL of Nexus repository

  nexus_url_snapshot:
    type: string
    description: Snapshot of Maven repository for DCAE deployment

  openstack_region:
    type: string
    description: Region where the DCAE controller will spin the VMs

  gitlab_branch:
    type: string
    description: Branch of the Gitlab repository
    
  dcae_code_version:
    type: string
    description: DCAE Code Version Number

  #####################
  #                   #
  # ONAP repositories #
  #                   #
  #####################

  aai_repo:
    type: string
  appc_repo:
    type: string
  dcae_repo:
    type: string
  mr_repo:
    type: string
  so_repo:
    type: string
  policy_repo:
    type: string
  portal_repo:
    type: string
  robot_repo:
    type: string
  sdc_repo:
    type: string
  sdnc_repo:
    type: string
  vid_repo:
    type: string
  clamp_repo:
    type: string
  vnfsdk_repo:
    type: string

  ################################
  #                              #
  # Docker versions and branches #
  #                              #
  ################################

  aai_docker:
    type: string
  appc_docker:
    type: string
  so_docker:
    type: string
  mr_docker:
    type: string
  dcae_docker:
    type: string
  policy_docker:
    type: string
  portal_docker:
    type: string
  robot_docker:
    type: string
  sdc_docker:
    type: string
  sdnc_docker:
    type: string
  vid_docker:
    type: string
  clamp_docker:
    type: string
  msb_docker:
    type: string
  mvim_docker:
    type: string
  vfc_docker:
    type: string
  uui_docker:
    type: string
  dgbuilder_docker:
    type: string

  aai_branch:
    type: string
  appc_branch:
    type: string
  so_branch:
    type: string
  mr_branch:
    type: string
  dcae_branch:
    type: string
  policy_branch:
    type: string
  portal_branch:
    type: string
  robot_branch:
    type: string
  sdc_branch:
    type: string
  sdnc_branch:
    type: string
  vid_branch:
    type: string
  clamp_branch:
    type: string
  vnfsdk_branch:
    type: string


#############
#           #
# RESOURCES #
#           #
#############

resources:
  random-str:
    type: OS::Heat::RandomString
    properties:
      length: 4


  # Public key used to access ONAP components
  vm_key:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: base_rand
          params:
            base: { get_param: key_name }
            rand: { get_resource: random-str }
      public_key: { get_param: pub_key }
      save_private_key: false


  # ONAP management private network
  oam_onap:
    type: OS::Neutron::Net
    properties:
      name:
        str_replace:
          template: oam_onap_rand
          params:
            rand: { get_resource: random-str }

  oam_onap_subnet:
    type: OS::Neutron::Subnet
    properties:
      name:
        str_replace:
          template: oam_onap_rand
          params:
            rand: { get_resource: random-str }
      network_id: { get_resource: oam_onap }
      cidr: { get_param: oam_network_cidr }
      dns_nameservers: { get_param: dns_list }

  router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net_id }
        external_fixed_ips:
          - ip_address: { get_param: router_gateway_ip }
            subnet: { get_param: public_subnet_id }

  router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: router }
      subnet_id: { get_resource: oam_onap_subnet }


  # DNS Server instantiation
  dns_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: dns_ip_addr }}]

  dns_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: dns_private_port }
      floating_ip_address: { get_param: dns_float_ip }

  dns_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_small }
      name:
        str_replace:
          template: base-dns-server
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: dns_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __artifacts_version__: { get_param: artifacts_version }
            __oam_network_cidr__: { get_attr: [oam_onap_subnet, cidr] }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __aai1_ip_addr__: { get_param: aai1_ip_addr }
            __aai2_ip_addr__: { get_param: aai2_ip_addr }
            __appc_ip_addr__: { get_param: appc_ip_addr }
            __dcae_ip_addr__: { get_param: dcae_ip_addr }
            __dcae_coll_ip_addr__: { get_param: dcae_coll_ip_addr }
            __so_ip_addr__: { get_param: so_ip_addr }
            __mr_ip_addr__: { get_param: mr_ip_addr }
            __policy_ip_addr__: { get_param: policy_ip_addr }
            __portal_ip_addr__: { get_param: portal_ip_addr }
            __robot_ip_addr__: { get_param: robot_ip_addr }
            __sdc_ip_addr__: { get_param: sdc_ip_addr }
            __sdnc_ip_addr__: { get_param: sdnc_ip_addr }
            __vid_ip_addr__: { get_param: vid_ip_addr }
            __clamp_ip_addr__: { get_param: clamp_ip_addr }
            __openo_ip_addr__: { get_param: openo_ip_addr }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__oam_network_cidr__" > /opt/config/oam_network_cidr.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__aai1_ip_addr__" > /opt/config/aai1_ip_addr.txt
            echo "__aai2_ip_addr__" > /opt/config/aai2_ip_addr.txt
            echo "__appc_ip_addr__" > /opt/config/appc_ip_addr.txt
            echo "__dcae_ip_addr__" > /opt/config/dcae_ip_addr.txt
            echo "__dcae_coll_ip_addr__" > /opt/config/dcae_coll_ip_addr.txt
            echo "__so_ip_addr__" > /opt/config/so_ip_addr.txt
            echo "__mr_ip_addr__" > /opt/config/mr_ip_addr.txt
            echo "__policy_ip_addr__" > /opt/config/policy_ip_addr.txt
            echo "__portal_ip_addr__" > /opt/config/portal_ip_addr.txt
            echo "__robot_ip_addr__" > /opt/config/robot_ip_addr.txt
            echo "__sdc_ip_addr__" > /opt/config/sdc_ip_addr.txt
            echo "__sdnc_ip_addr__" > /opt/config/sdnc_ip_addr.txt
            echo "__vid_ip_addr__" > /opt/config/vid_ip_addr.txt
            echo "__clamp_ip_addr__" > /opt/config/clamp_ip_addr.txt
            echo "__openo_ip_addr__" > /opt/config/openo_ip_addr.txt
            echo "__external_dns__" > /opt/config/external_dns.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/dns_install.sh -o /opt/dns_install.sh
            cd /opt
            chmod +x dns_install.sh
            ./dns_install.sh


  # A&AI instantiation (2 VMs)
  aai1_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: aai1_ip_addr }}]

  aai1_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: aai1_private_port }
      floating_ip_address: { get_param: aai1_float_ip }

  aai1_vm:
    type: OS::Nova::Server
    depends_on: aai2_vm
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_xlarge }
      name:
        str_replace:
          template: base-aai-inst1
          params:
            base: { get_param: vm_base_name }      
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: aai1_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __dmaap_topic__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: aai_docker }
            __cloud_env__: { get_param: cloud_env }
            __gerrit_branch__: { get_param: aai_branch }
            __external_dns__: { get_param: external_dns }
            __aai_repo__: { get_param: aai_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__dmaap_topic__" > /opt/config/dmaap_topic.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "aai_instance_1" > /opt/config/aai_instance.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__aai_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/aai_install.sh -o /opt/aai_install.sh
            cd /opt
            chmod +x aai_install.sh
            ./aai_install.sh


  aai2_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: aai2_ip_addr }}]

  aai2_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: aai2_private_port }
      floating_ip_address: { get_param: aai2_float_ip }

  aai2_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_xlarge }
      name:
        str_replace:
          template: base-aai-inst2
          params:
            base: { get_param: vm_base_name }      
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: aai2_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __dmaap_topic__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: aai_docker }
            __cloud_env__: { get_param: cloud_env }
            __gerrit_branch__: { get_param: aai_branch }
            __external_dns__: { get_param: external_dns }
            __aai_repo__: { get_param: aai_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__dmaap_topic__" > /opt/config/dmaap_topic.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "aai_instance_2" > /opt/config/aai_instance.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__aai_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/aai_install.sh -o /opt/aai_install.sh
            cd /opt
            chmod +x aai_install.sh
            ./aai_install.sh


  # SO instantiation
  so_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: so_ip_addr }}]

  so_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: so_private_port }
      floating_ip_address: { get_param: so_float_ip }

  so_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_large }
      name:
        str_replace:
          template: base-so
          params:
            base: { get_param: vm_base_name }      
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: so_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __openstack_username__: { get_param: openstack_username }
            __openstack_tenant_id__: { get_param: openstack_tenant_id }
            __openstack_api_key__: { get_param: openstack_api_key }
            __openstack_region__: { get_param: openstack_region }
            __keystone_url__: { get_param: keystone_url }
            __dmaap_topic__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: so_docker }
            __gerrit_branch__: { get_param: so_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __so_repo__: { get_param: so_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__dmaap_topic__" > /opt/config/dmaap_topic.txt
            echo "__openstack_username__" > /opt/config/openstack_username.txt
            echo "__openstack_tenant_id__" > /opt/config/tenant_id.txt
            echo "__openstack_api_key__" > /opt/config/openstack_api_key.txt
            echo "__openstack_region__" > /opt/config/openstack_region.txt
            echo "__keystone_url__" > /opt/config/keystone.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__so_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/so_install.sh -o /opt/so_install.sh
            cd /opt
            chmod +x so_install.sh
            ./so_install.sh


  # Message Router instantiation
  mrouter_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: mr_ip_addr }}]

  mrouter_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: mrouter_private_port }
      floating_ip_address: { get_param: mr_float_ip }

  mrouter_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_large }
      name:
        str_replace: 
          template: base-message-router
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: mrouter_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __gerrit_branch__: { get_param: mr_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __mr_repo__: { get_param: mr_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__mr_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/mr_install.sh -o /opt/mr_install.sh
            cd /opt
            chmod +x mr_install.sh
            ./mr_install.sh


  # Robot Framework instantiation
  robot_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: robot_ip_addr }}]

  robot_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: robot_private_port }
      floating_ip_address: { get_param: robot_float_ip }
 
  robot_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_small }
      name:
        str_replace: 
          template: base-robot
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: robot_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __network_name__: { get_attr: [oam_onap, name] }
            __openstack_username__: { get_param: openstack_username }
            __openstack_api_key__: { get_param : openstack_api_key }
            __openstack_tenant_id__: { get_param: openstack_tenant_id }
            __artifacts_version__: { get_param: artifacts_version }
            __openstack_region__: { get_param: openstack_region }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: robot_docker }
            __gerrit_branch__: { get_param: robot_branch }
            __keystone_url__: { get_param: keystone_url }
            __aai1_ip_addr__: { get_param: aai1_ip_addr }
            __aai2_ip_addr__: { get_param: aai2_ip_addr }
            __appc_ip_addr__: { get_param: appc_ip_addr }
            __dcae_ip_addr__: { get_param: dcae_ip_addr }
            __so_ip_addr__: { get_param: so_ip_addr }
            __mr_ip_addr__: { get_param: mr_ip_addr }
            __policy_ip_addr__: { get_param: policy_ip_addr }
            __portal_ip_addr__: { get_param: portal_ip_addr }
            __sdc_ip_addr__: { get_param: sdc_ip_addr }
            __sdnc_ip_addr__: { get_param: sdnc_ip_addr }
            __vid_ip_addr__: { get_param: vid_ip_addr }
            __clamp_ip_addr__: { get_param: clamp_ip_addr }
            __openo_ip_addr__: { get_param: openo_ip_addr }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __vm_image_name__: { get_param: ubuntu_1404_image }
            __vm_flavor__: { get_param: flavor_medium }
            __robot_repo__: { get_param: robot_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__network_name__" > /opt/config/network.txt
            echo "__openstack_username__" > /opt/config/openstack_username.txt
            echo "__openstack_api_key__" > /opt/config/openstack_password.txt
            echo "__openstack_tenant_id__" > /opt/config/openstack_tenant_id.txt
            echo "__openstack_region__" > /opt/config/region.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__keystone_url__" > /opt/config/keystone.txt
            echo "__aai1_ip_addr__" > /opt/config/aai1_ip_addr.txt
            echo "__aai2_ip_addr__" > /opt/config/aai2_ip_addr.txt
            echo "__appc_ip_addr__" > /opt/config/appc_ip_addr.txt
            echo "__dcae_ip_addr__" > /opt/config/dcae_ip_addr.txt
            echo "__so_ip_addr__" > /opt/config/so_ip_addr.txt
            echo "__mr_ip_addr__" > /opt/config/mr_ip_addr.txt
            echo "__policy_ip_addr__" > /opt/config/policy_ip_addr.txt
            echo "__portal_ip_addr__" > /opt/config/portal_ip_addr.txt
            echo "__sdc_ip_addr__" > /opt/config/sdc_ip_addr.txt
            echo "__sdnc_ip_addr__" > /opt/config/sdnc_ip_addr.txt
            echo "__vid_ip_addr__" > /opt/config/vid_ip_addr.txt
            echo "__clamp_ip_addr__" > /opt/config/clamp_ip_addr.txt
            echo "__openo_ip_addr__" > /opt/config/openo_ip_addr.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__vm_image_name__" > /opt/config/vm_image_name.txt
            echo "__vm_flavor__" > /opt/config/vm_flavor.txt
            echo "__robot_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/robot_install.sh -o /opt/robot_install.sh
            cd /opt
            chmod +x robot_install.sh
            ./robot_install.sh


  # VID instantiation
  vid_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: vid_ip_addr }}]

  vid_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: vid_private_port }
      floating_ip_address: { get_param: vid_float_ip }

  vid_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_medium }
      name:
        str_replace: 
          template: base-vid
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: vid_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: vid_docker }
            __gerrit_branch__: { get_param: vid_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __vid_repo__: { get_param: vid_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__vid_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/vid_install.sh -o /opt/vid_install.sh
            cd /opt
            chmod +x vid_install.sh
            ./vid_install.sh

 
  # SDN-C instantiation
  sdnc_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: sdnc_ip_addr }}]

  sdnc_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: sdnc_private_port }
      floating_ip_address: { get_param: sdnc_float_ip }

  sdnc_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_large }
      name:
        str_replace: 
          template: base-sdnc
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: sdnc_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: sdnc_docker }
            __gerrit_branch__: { get_param: sdnc_branch }
            __dgbuilder_docker__: { get_param: dgbuilder_docker }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __sdnc_repo__: { get_param: sdnc_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__dgbuilder_docker__" > /opt/config/dgbuilder_version.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__sdnc_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/sdnc_install.sh -o /opt/sdnc_install.sh
            cd /opt
            chmod +x sdnc_install.sh
            ./sdnc_install.sh


  # SDC instantiation
  sdc_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: sdc_ip_addr }}]

  sdc_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: sdc_private_port }
      floating_ip_address: { get_param: sdc_float_ip }

  sdc_volume_data:
    type: OS::Cinder::Volume
    properties:
      name: vol1-sdc-data
      size: 100

  sdc_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_xlarge }
      name:
        str_replace: 
          template: base-sdc
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: sdc_private_port }
      block_device_mapping:
        - device_name: /dev/vdb
          volume_id: {get_resource: sdc_volume_data}
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __env_name__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __mr_ip_addr__: { get_param: mr_ip_addr }
            __public_ip__: { get_attr: [sdc_floating_ip, floating_ip_address] }
            __docker_version__: { get_param: sdc_docker }
            __gerrit_branch__: { get_param: sdc_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __sdc_repo__: { get_param: sdc_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__env_name__" > /opt/config/env_name.txt
            echo "__mr_ip_addr__" > /opt/config/mr_ip_addr.txt
            echo "__public_ip__" > /opt/config/public_ip.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__sdc_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/sdc_install.sh -o /opt/sdc_install.sh
            cd /opt
            chmod +x sdc_install.sh
            ./sdc_install.sh


  # PORTAL instantiation
  portal_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: portal_ip_addr }}]

  portal_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: portal_private_port }
      floating_ip_address: { get_param: portal_float_ip }

  portal_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_large }
      name:
        str_replace: 
          template: base-portal
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: portal_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __public_ip__: { get_attr: [portal_floating_ip, floating_ip_address] }
            __docker_version__: { get_param: portal_docker }
            __gerrit_branch__: { get_param: portal_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __portal_repo__: { get_param: portal_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__public_ip__" > /opt/config/public_ip.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__portal_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/portal_install.sh -o /opt/portal_install.sh
            cd /opt
            chmod +x portal_install.sh
            ./portal_install.sh


  # DCAE Controller instantiation
  dcae_c_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: dcae_ip_addr }}]

  dcae_c_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: dcae_c_private_port }
      floating_ip_address: { get_param: dcae_float_ip }

  dcae_c_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_medium }
      name:
        str_replace: 
          template: base-dcae-controller
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: dcae_c_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __nexus_url_snapshots__: { get_param: nexus_url_snapshot }
            __gitlab_branch__: { get_param: gitlab_branch }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __dcae_zone__: { get_param: dcae_zone }
            __dcae_state__: { get_param: dcae_state }
            __artifacts_version__: { get_param: artifacts_version }
            __tenant_id__: { get_param: openstack_tenant_id }
            __openstack_private_network_name__: { get_attr: [oam_onap, name] }
            __openstack_user__: { get_param: openstack_username }
            __openstack_password__: { get_param: openstack_api_key }
            __openstack_auth_method__: { get_param: openstack_auth_method }
            __key_name__: { get_param: key_name }
            __rand_str__: { get_resource: random-str }
            __pub_key__: { get_param: pub_key }
            __nexus_repo_root__: { get_param: nexus_repo_root }
            __openstack_region__: { get_param: openstack_region }
            __horizon_url__: { get_param: horizon_url }
            __keystone_url__: { get_param: keystone_url }
            __docker_version__: { get_param: dcae_docker }
            __gerrit_branch__: { get_param: dcae_branch }
            __dcae_code_version__: { get_param: dcae_code_version }
            __cloud_env__: { get_param: cloud_env }
            __public_net_id__: { get_param: public_net_id }
            __dcae_base_environment__: { get_param: dcae_base_environment }
            __dcae_ip_addr__: { get_param: dcae_ip_addr }
            __dcae_coll_ip_addr__: { get_param: dcae_coll_ip_addr }
            __dcae_db_ip_addr__: { get_param: dcae_db_ip_addr }
            __dcae_hdp1_ip_addr__: { get_param: dcae_hdp1_ip_addr }
            __dcae_hdp2_ip_addr__: { get_param: dcae_hdp2_ip_addr }
            __dcae_hdp3_ip_addr__: { get_param: dcae_hdp3_ip_addr }
            __dcae_float_ip__: { get_param: dcae_float_ip }
            __dcae_coll_float_ip__: { get_param: dcae_coll_float_ip }
            __dcae_db_float_ip__: { get_param: dcae_db_float_ip }
            __dcae_hdp1_float_ip__: { get_param: dcae_hdp1_float_ip }
            __dcae_hdp2_float_ip__: { get_param: dcae_hdp2_float_ip }
            __dcae_hdp3_float_ip__: { get_param: dcae_hdp3_float_ip }
            __external_dns__: { get_param: external_dns }
            __ubuntu_1404_image__: { get_param: ubuntu_1404_image }
            __ubuntu_1604_image__: { get_param: ubuntu_1604_image }
            __flavor_small__: { get_param: flavor_small }
            __flavor_medium__: { get_param: flavor_medium }
            __flavor_large__: { get_param: flavor_large }
            __flavor_xlarge__: { get_param: flavor_xlarge }
            __dcae_repo__: { get_param: dcae_repo }
            __mr_repo__: { get_param: mr_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__nexus_url_snapshots__" > /opt/config/nexus_url_snapshots.txt
            echo "__gitlab_branch__" > /opt/config/gitlab_branch.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__dcae_zone__" > /opt/config/dcae_zone.txt
            echo "__dcae_state__" > /opt/config/dcae_state.txt
            echo "__tenant_id__" > /opt/config/tenant_id.txt
            echo "__openstack_private_network_name__" > /opt/config/openstack_private_network_name.txt
            echo "__openstack_user__" > /opt/config/openstack_user.txt
            echo "__openstack_password__" > /opt/config/openstack_password.txt
            echo "__openstack_auth_method__" > /opt/config/openstack_auth_method.txt
            echo "__key_name__" > /opt/config/key_name.txt
            echo "__rand_str__" > /opt/config/rand_str.txt
            echo "__pub_key__" > /opt/config/pub_key.txt
            echo "__nexus_repo_root__" > /opt/config/nexus_repo_root.txt
            echo "__openstack_region__" > /opt/config/openstack_region.txt
            echo "__horizon_url__" > /opt/config/horizon_url.txt
            echo "__keystone_url__" > /opt/config/keystone_url.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__public_net_id__" > /opt/config/public_net_id.txt
            echo "__dcae_base_environment__" > /opt/config/dcae_base_environment.txt
            echo "__dcae_code_version__" > /opt/config/dcae_code_version.txt
            echo "__dcae_ip_addr__" > /opt/config/dcae_ip_addr.txt
            echo "__dcae_coll_ip_addr__" > /opt/config/dcae_coll_ip_addr.txt
            echo "__dcae_db_ip_addr__" > /opt/config/dcae_db_ip_addr.txt
            echo "__dcae_hdp1_ip_addr__" > /opt/config/dcae_hdp1_ip_addr.txt
            echo "__dcae_hdp2_ip_addr__" > /opt/config/dcae_hdp2_ip_addr.txt
            echo "__dcae_hdp3_ip_addr__" > /opt/config/dcae_hdp3_ip_addr.txt
            echo "__dcae_float_ip__" > /opt/config/dcae_float_ip.txt
            echo "__dcae_coll_float_ip__" > /opt/config/dcae_coll_float_ip.txt
            echo "__dcae_db_float_ip__" > /opt/config/dcae_db_float_ip.txt
            echo "__dcae_hdp1_float_ip__" > /opt/config/dcae_hdp1_float_ip.txt
            echo "__dcae_hdp2_float_ip__" > /opt/config/dcae_hdp2_float_ip.txt
            echo "__dcae_hdp3_float_ip__" > /opt/config/dcae_hdp3_float_ip.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__ubuntu_1404_image__" > /opt/config/ubuntu_1404_image.txt
            echo "__ubuntu_1604_image__" > /opt/config/ubuntu_1604_image.txt
            echo "__flavor_small__" > /opt/config/flavor_small.txt
            echo "__flavor_medium__" > /opt/config/flavor_medium.txt
            echo "__flavor_large__" > /opt/config/flavor_large.txt
            echo "__flavor_xlarge__" > /opt/config/flavor_xlarge.txt
            echo "__dcae_repo__" > /opt/config/remote_repo.txt
            echo "__mr_repo__" > /opt/config/mr_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/dcae_install.sh -o /opt/dcae_install.sh
            cd /opt
            chmod +x dcae_install.sh
            ./dcae_install.sh


  # Policy Engine instantiation
  policy_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: policy_ip_addr }}]

  policy_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: policy_private_port }
      floating_ip_address: { get_param: policy_float_ip }

  policy_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_xlarge }
      name:
        str_replace: 
          template: base-policy
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: policy_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __public_ip__: { get_attr: [policy_floating_ip, floating_ip_address] }
            __docker_version__: { get_param: policy_docker }
            __gerrit_branch__: { get_param: policy_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __policy_repo__: { get_param: policy_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__public_ip__" > /opt/config/public_ip.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__policy_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/policy_install.sh -o /opt/policy_install.sh
            cd /opt
            chmod +x policy_install.sh
            ./policy_install.sh


  # APP-C instantiation
  appc_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: appc_ip_addr }}]

  appc_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: appc_private_port }
      floating_ip_address: { get_param: appc_float_ip }

  appc_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1404_image }
      flavor: { get_param: flavor_large }
      name:
        str_replace: 
          template: base-appc
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: appc_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __dmaap_topic__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: appc_docker }
            __gerrit_branch__: { get_param: appc_branch }
            __dgbuilder_docker__: { get_param: dgbuilder_docker }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __appc_repo__: { get_param: appc_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__dmaap_topic__" > /opt/config/dmaap_topic.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__dgbuilder_docker__" > /opt/config/dgbuilder_version.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__appc_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/appc_install.sh -o /opt/appc_install.sh
            cd /opt
            chmod +x appc_install.sh
            ./appc_install.sh


  # CLAMP instantiation
  clamp_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: clamp_ip_addr }}]

  clamp_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: clamp_private_port }
      floating_ip_address: { get_param: clamp_float_ip }

  clamp_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_medium }
      name:
        str_replace:
          template: base-clamp
          params:
            base: { get_param: vm_base_name }      
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: clamp_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __openstack_username__: { get_param: openstack_username }
            __openstack_tenant_id__: { get_param: openstack_tenant_id }
            __openstack_api_key__: { get_param: openstack_api_key }
            __openstack_region__: { get_param: openstack_region }
            __keystone_url__: { get_param: keystone_url }
            __dmaap_topic__: { get_param: dmaap_topic }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __docker_version__: { get_param: clamp_docker }
            __gerrit_branch__: { get_param: clamp_branch }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __clamp_repo__: { get_param: clamp_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__dmaap_topic__" > /opt/config/dmaap_topic.txt
            echo "__openstack_username__" > /opt/config/openstack_username.txt
            echo "__openstack_tenant_id__" > /opt/config/tenant_id.txt
            echo "__openstack_api_key__" > /opt/config/openstack_api_key.txt
            echo "__openstack_region__" > /opt/config/openstack_region.txt
            echo "__keystone_url__" > /opt/config/keystone.txt
            echo "__docker_version__" > /opt/config/docker_version.txt
            echo "__gerrit_branch__" > /opt/config/gerrit_branch.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__clamp_repo__" > /opt/config/remote_repo.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/clamp_install.sh -o /opt/clamp_install.sh
            cd /opt
            chmod +x clamp_install.sh
            ./clamp_install.sh


  # OPEN-O VM instantiation
  openo_private_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: oam_onap }
      fixed_ips: [{"subnet": { get_resource: oam_onap_subnet }, "ip_address": { get_param: openo_ip_addr }}]

  openo_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network_id: { get_param: public_net_id }
      port_id: { get_resource: openo_private_port }
      floating_ip_address: { get_param: openo_float_ip }

  openo_vm:
    type: OS::Nova::Server
    properties:
      image: { get_param: ubuntu_1604_image }
      flavor: { get_param: flavor_xxlarge }
      name:
        str_replace:
          template: base-openo-server
          params:
            base: { get_param: vm_base_name }
      key_name: { get_resource: vm_key }
      networks:
        - port: { get_resource: openo_private_port }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            __nexus_repo__: { get_param: nexus_repo }
            __nexus_docker_repo__: { get_param: nexus_docker_repo }
            __nexus_username__: { get_param: nexus_username }
            __nexus_password__: { get_param: nexus_password }
            __artifacts_version__: { get_param: artifacts_version }
            __dns_ip_addr__: { get_param: dns_ip_addr }
            __oam_network_cidr__: { get_param: oam_network_cidr }
            __aai1_ip_addr__: { get_param: aai1_ip_addr }
            __aai2_ip_addr__: { get_param: aai2_ip_addr }
            __appc_ip_addr__: { get_param: appc_ip_addr }
            __dcae_ip_addr__: { get_param: dcae_ip_addr }
            __dcae_coll_ip_addr__: { get_param: dcae_coll_ip_addr }
            __so_ip_addr__: { get_param: so_ip_addr }
            __mr_ip_addr__: { get_param: mr_ip_addr }
            __policy_ip_addr__: { get_param: policy_ip_addr }
            __portal_ip_addr__: { get_param: portal_ip_addr }
            __robot_ip_addr__: { get_param: robot_ip_addr }
            __sdc_ip_addr__: { get_param: sdc_ip_addr }
            __sdnc_ip_addr__: { get_param: sdnc_ip_addr }
            __vid_ip_addr__: { get_param: vid_ip_addr }
            __clamp_ip_addr__: { get_param: clamp_ip_addr }
            __openo_ip_addr__: { get_param: openo_ip_addr }
            __cloud_env__: { get_param: cloud_env }
            __external_dns__: { get_param: external_dns }
            __vnfsdk_branch__: { get_param: vnfsdk_branch }
            __msb_docker__: { get_param: msb_docker }
            __mvim_docker__: { get_param: mvim_docker }
            __vfc_docker__: { get_param: vfc_docker }
            __uui_docker__: { get_param: uui_docker }
            __vnfsdk_repo__: { get_param: vnfsdk_repo }
          template: |
            #!/bin/bash

            # Create configuration files
            mkdir -p /opt/config
            echo "__nexus_repo__" > /opt/config/nexus_repo.txt
            echo "__nexus_docker_repo__" > /opt/config/nexus_docker_repo.txt
            echo "__nexus_username__" > /opt/config/nexus_username.txt
            echo "__nexus_password__" > /opt/config/nexus_password.txt
            echo "__cloud_env__" > /opt/config/cloud_env.txt
            echo "__artifacts_version__" > /opt/config/artifacts_version.txt
            echo "__oam_network_cidr__" > /opt/config/oam_network_cidr.txt
            echo "__dns_ip_addr__" > /opt/config/dns_ip_addr.txt
            echo "__external_dns__" > /opt/config/external_dns.txt
            echo "__vnfsdk_branch__" > /opt/config/vnfsdk_branch.txt
            echo "__msb_docker__" > /opt/config/msb_docker.txt
            echo "__mvim_docker__" > /opt/config/mvim_docker.txt
            echo "__vfc_docker__" > /opt/config/vfc_docker.txt
            echo "__uui_docker__" > /opt/config/uui_docker.txt
            echo "__vnfsdk_repo__" > /opt/config/vnfsdk_repo.txt

            # Create env file with the IP address of all ONAP components
            echo "export AAI_IP1=__aai1_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export AAI_IP2=__aai2_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export APPC_IP=__appc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export DCAE_IP=__dcae_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export DCAE_COLL_IP=__dcae_coll_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SO_IP=__so_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export MR_IP=__mr_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export POLICY_IP=__policy_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export PORTAL_IP=__portal_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export ROBOT_IP=__robot_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SDC_IP=__sdc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export SDNC_IP=__sdnc_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export VID_IP=__vid_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export CLAMP_IP=__clamp_ip_addr__" >> /opt/config/onap_ips.txt
            echo "export OPENO_IP=__openo_ip_addr__" >> /opt/config/onap_ips.txt

            # Download and run install script
            curl -k __nexus_repo__/org.onap.demo/boot/__artifacts_version__/openo_install.sh -o /opt/openo_install.sh
            cd /opt
            chmod +x openo_install.sh
            ./openo_install.sh